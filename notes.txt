Conversion specification format: %(- &| + &| ' ' &| # &| 0)(int || '*')(. && (int || '*'))

string: the initial format string
index: index inside of string or a pointer
count: how many characters have been
flags: the flags that modify the behavior of the conversion 11 - 13 bits of
	information, probably a char array makes the most sense where array[HASH]
	expands to array[0] or something.
precision: integer that represents the precision
minimum field-width: TODO idk

FLAGS:
#
0
-
+
space
hh
h
l
ll
j
z

Bonus flags:
*
$
L
'

Other Bonus Flags:
%b := to print in binary
%r := to print a string of nonprintable characters,
%k := to print a date in any ordinary ISO format etc

Other Bonus:
Colors
fd
print files

function to call on:
% := parse_flags

s, S := character string
p := write an implementation defined character sequence defining a pointer
d, D, i := signed integer into decimal
o, O := unsigned integer into octal
u, U := unsigned integer into decimal
x, X := unsigned integer into hexadecimal
c, C := single character
% := %

Bonus:
f, F := floating-point number into decimal
e, E := floating-point number into decimal exponent notation
a, A := floating-point number into hexadecimal exponent notation
g, G := floating point number to decimal or decimal exponent notation depending on the value and precision
n := returns the number of characters written so far by this call to the function
